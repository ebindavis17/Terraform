#######################################################################################################################################
This Terraform scipt will provision 2 AWS instances, a Linux machine and a Windows machine

Step_by_Step:
* Using aws module , provisoning aws instances
* Creating VPC - "TestVPC"
* Creating 2 Subnets - Linux and Windows subnet
* Creating security group for Ec2 instances
* Creating EC2 instance

#######################################################################################################################################

#Provider file

provider "aws" {
  access_key = "${var.access_key}"
  secret_key = "${var.secret_key}"
  region     = "${var.region}"
}

# Creating VPC

resource "aws_vpc" "vpc_test" {
  cidr_block = "${var.cidr_block}"
  enable_dns_support = true
  enable_dns_hostnames = false
  tags = {
    Name = "TestVPC"
  }
}

# Creating Subnets

resource "aws_subnet" "subnet1_ap-northeast-1" {
  vpc_id                  = "${aws_vpc.vpc_test.id}"
  cidr_block              = "172.31.1.0/24"
  map_public_ip_on_launch = true
  availability_zone = "ap-northeast-1a"
  tags = {
        Name =  "linux_subnet"
  }
}

resource "aws_subnet" "subnet2_ap-northeast-1" {
  vpc_id                  = "${aws_vpc.vpc_test.id}"
  cidr_block              = "172.31.2.0/24"
  map_public_ip_on_launch = true
  availability_zone = "ap-northeast-1c"
  tags = {
        Name =  "windows_subnet"
  }
}

#Creating & Mapping internet gateway to VPC
resource "aws_internet_gateway" "gw" {
  vpc_id = "${aws_vpc.vpc_test.id}"
  tags {
        Name = "InternetGateway"
    }
}

# creating security group for Ec2 instances

resource "aws_security_group" "linux_sg" {
  name        = "linux_sg"
  vpc_id      = "${aws_vpc.vpc_test.id}"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
}
resource "aws_security_group" "windows_sg" {
  name        = "windows_sg"
  vpc_id      = "${aws_vpc.vpc_test.id}"

 ingress {
    from_port   = 3389
    to_port     = 3389
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
}

#creating EC2 instance
resource "aws_instance" "ec2" {
  ami           = "${var.ami_1}"
  instance_type = "t2.micro"
  vpc_security_group_ids = ["${aws_security_group.linux_sg.id}"]
  subnet_id = "${aws_subnet.subnet1_ap-northeast-1.id}"
  tags = {
        Name = "Linux_machine"
}
}

resource "aws_instance" "ec2_1" {
  ami           = "${var.ami_2}"
  instance_type = "t2.micro"
  vpc_security_group_ids = ["${aws_security_group.windows_sg.id}"]
  subnet_id = "${aws_subnet.subnet2_ap-northeast-1.id}"
  tags = {
        Name = "Windows_machine"
}
}
